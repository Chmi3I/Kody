package dev.felix.antiesp;

import org.bukkit.Bukkit; import org.bukkit.Chunk; import org.bukkit.Location; import org.bukkit.Material; import org.bukkit.entity.Player; import org.bukkit.event.EventHandler; import org.bukkit.event.Listener; import org.bukkit.event.player.PlayerMoveEvent; import org.bukkit.plugin.java.JavaPlugin; import org.bukkit.scheduler.BukkitRunnable;

import java.util.HashSet; import java.util.Set;

public class AntiESPPlugin extends JavaPlugin implements Listener {

private static final int DETECTION_RADIUS = 16; // ile kratek gracz musi być od innego gracza/bloku by go zobaczyć
private static final Set<Material> PROTECTED_BLOCKS = Set.of(
        Material.CHEST,
        Material.BARREL,
        Material.ENDER_CHEST,
        Material.TRAPPED_CHEST
);

@Override
public void onEnable() {
    Bukkit.getPluginManager().registerEvents(this, this);
    new VisibilityTask().runTaskTimer(this, 0L, 20L); // co sekundę odświeża widoczność
}

@Override
public void onDisable() {
}

private class VisibilityTask extends BukkitRunnable {
    @Override
    public void run() {
        for (Player observer : Bukkit.getOnlinePlayers()) {
            for (Player target : Bukkit.getOnlinePlayers()) {
                if (observer.equals(target)) continue;

                if (observer.getWorld().equals(target.getWorld()) &&
                        observer.getLocation().distanceSquared(target.getLocation()) <= DETECTION_RADIUS * DETECTION_RADIUS) {
                    observer.showPlayer(AntiESPPlugin.this, target);
                } else {
                    observer.hidePlayer(AntiESPPlugin.this, target);
                }
            }

            // Ukrywanie skrzyń i innych "cennych" bloków
            Chunk chunk = observer.getLocation().getChunk();
            for (int x = 0; x < 16; x++) {
                for (int y = 0; y < observer.getWorld().getMaxHeight(); y++) {
                    for (int z = 0; z < 16; z++) {
                        Location loc = chunk.getBlock(x, y, z).getLocation();
                        if (observer.getLocation().distanceSquared(loc) <= DETECTION_RADIUS * DETECTION_RADIUS) continue;
                        if (PROTECTED_BLOCKS.contains(loc.getBlock().getType())) {
                            loc.getBlock().setType(Material.AIR);
                        }
                    }
                }
            }
        }
    }
}

@EventHandler
public void onMove(PlayerMoveEvent event) {
    // Trigger odświeżania przy poruszaniu się gracza
    // (zostawione puste - główna logika działa w VisibilityTask)
}

}

